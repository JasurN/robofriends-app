{"version":3,"sources":["features/robots/RobotCard.tsx","features/robots/CardList.tsx","api/robots.ts","features/robots/robotsSlice.ts","app/App.tsx","app/rootReducer.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","card","minWidth","minHeight","background","transition","transform","image","height","width","margin","RobotCard","props","classes","Grid","item","Card","className","CardMedia","id","title","CardContent","Typography","gutterBottom","variant","component","align","Box","fontWeight","name","email","bullet","display","fontSize","pos","marginBottom","cardContainer","marginTop","maxWidth","CardList","container","direction","justify","spacing","style","borderTop","robots","map","robot","key","getRobots","a","axios","get","robotsResponse","data","createSlice","initialState","isPending","error","reducers","getRobotsPending","state","action","payload","setRobotsRequestError","setRobots","actions","root","flexGrow","mainTitle","fontFamily","color","searchField","marginLeft","App","useState","setSearchField","dispatch","useDispatch","useSelector","useEffect","toString","length","TextField","label","onChange","event","target","value","filter","toLowerCase","includes","rootReducer","combineReducers","robotsReducer","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1658192c.chunk.js","sourcesContent":["import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {createStyles, Grid} from \"@material-ui/core\";\nimport React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Box from \"@material-ui/core/Box\";\nimport { Robot } from './robotsSlice'\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        card: {\n            minWidth: 220,\n            minHeight: 320,\n            background: '#9eebcf',\n            transition: 'transform .2s',\n            \"&:hover\": {\n                transform: 'scale(1.05)'\n            }\n        },\n        image: {\n            height: 200,\n            width: 200,\n            margin: '0 auto',\n        },\n    }),\n);\nexport default function RobotCard(props: Robot) {\n    const classes = useStyles();\n    return (\n        <Grid item>\n            <Card className={classes.card}>\n                <CardMedia\n                    className={classes.image}\n                    image={`https://robohash.org/${props.id}?size=200x200`}\n                    title=\"Contemplative Reptile\"\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\" align='center'>\n                        <Box fontWeight=\"fontWeightBold\">\n                            {props.name}\n                        </Box>\n                    </Typography>\n                    <Typography variant=\"subtitle1\" component=\"p\" align='center'>\n                        {props.email}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}","import { createStyles, Grid } from '@material-ui/core'\nimport React from 'react'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport RobotCard from './RobotCard'\nimport { Robot, Robots } from './robotsSlice'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)'\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    },\n    cardContainer: {\n      marginTop: '2ch'\n    },\n    card: {\n      minWidth: 250,\n      maxWidth: 300\n    }\n  })\n)\n\nexport default function CardList(props: Robots) {\n  const classes = useStyles()\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      spacing={2}\n      className={classes.cardContainer}\n      style={{ borderTop: '5px solid black' }}\n    >\n      {props.robots.map((robot: Robot) =>\n\n        <RobotCard key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n      )}\n    </Grid>\n  )\n}","import axios from 'axios'\nimport { Robot, Robots } from '../features/robots/robotsSlice'\n\nexport async function getRobots(): Promise<Robots> {\n  const url = `https://jsonplaceholder.typicode.com/users`\n  try {\n    const robotsResponse = await axios.get<Robot[]>(url)\n    return { robots: robotsResponse.data }\n  } catch (err) {\n    throw err\n  }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '../../app/store'\nimport { getRobots } from '../../api/robots'\n\ninterface RequestPending {\n  isPending: boolean\n}\n\nexport interface Robot {\n  id: number,\n  name: string,\n  email: string\n}\n\ninterface RequestError {\n  error: string\n}\n\nexport interface Robots {\n  robots: Robot[],\n}\n\ntype initialStateRobots = {} & RequestPending\n  & RequestError\n  & Robots\n\nlet initialState: initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\nconst robots = createSlice({\n  name: 'issuesDisplay',\n  initialState,\n  reducers: {\n    getRobotsPending(state, action: PayloadAction<RequestPending>) {\n      const { isPending } = action.payload\n      state.isPending = isPending\n    },\n    setRobotsRequestError(state, action: PayloadAction<RequestError>) {\n      state.error = action.payload.error\n      state.isPending = false\n    },\n    setRobots(state, action: PayloadAction<Robots>) {\n      state.robots = action.payload.robots\n      state.isPending = false\n    }\n  }\n})\n\nexport const {\n  getRobotsPending,\n  setRobotsRequestError,\n  setRobots\n} = robots.actions\n\nexport default robots.reducer\n\nexport const fetchIssue = (): AppThunk => async dispatch => {\n  try {\n    dispatch(getRobotsPending({ isPending: true }))\n    const robots = await getRobots()\n    dispatch(setRobots(robots))\n  } catch (err) {\n    dispatch(setRobotsRequestError(err.toString()))\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport './App.css'\nimport { createStyles, Grid } from '@material-ui/core'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport CardList from '../features/robots/CardList'\nimport { fetchIssue, Robot } from '../features/robots/robotsSlice'\nimport { RootState } from './rootReducer'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    mainTitle: {\n      fontFamily: 'SEGA LOGO FONT',\n      fontWeight: 200,\n      color: '#0ccac4',\n      marginTop: '20px'\n    },\n    searchField: {\n      width: '25ch',\n      background: '#ffffff',\n      marginTop: '4ch',\n      marginLeft: 90\n    }\n\n  })\n)\n\ntype Props = {};\nexport const App: React.FC<Props> = () => {\n  const [searchField, setSearchField] = useState('')\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const robotsSelector = (state: RootState) => state.robots.robots\n  const robots = useSelector(robotsSelector)\n\n  useEffect(() => {\n    dispatch(fetchIssue())\n  }, [dispatch])\n\n  function handleOnChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchField(event.target.value);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n      >\n        {robots && robots.length > 0 ? (\n            <>\n              <Grid item>\n                <Typography variant=\"h3\" className={classes.mainTitle}>\n                  RoboFriends\n                </Typography>\n                <TextField id=\"filled-basic\" className={classes.searchField} label=\"search robots\"\n                           variant=\"filled\" onChange={handleOnChange} />\n              </Grid>\n              <CardList robots={robots.filter((robot: Robot) => {\n                if (searchField && searchField.length) {\n                  if (robot.name.toLowerCase().includes(searchField.toLowerCase())) {\n                    return robot\n                  }\n                  return null\n                } else {\n                  return robot\n                }\n              })} />\n            </>\n          ) :\n          (\n            <Grid item>\n              <Typography variant=\"h3\" className={classes.mainTitle}>\n                Loading\n              </Typography>\n            </Grid>\n          )\n        }\n      </Grid>\n    </div>\n  )\n}\n\nexport default App","import { combineReducers } from 'redux'\nimport robotsReducer from '../features/robots/robotsSlice'\n\nconst rootReducer = combineReducers({\n  robots: robotsReducer\n})\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\nimport rootReducer, { RootState } from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport store from './app/store'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}